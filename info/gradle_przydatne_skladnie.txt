apply plugin: 'java'

sourceSets.main.java.srcDir "src"

configurations.create('bootWeb')

  fileTree("W:/jpk/en/20160604", { include "*.xsd" })  

  new ProcessBuilder(sSymfExe).start()

// Dump all dependencies for given configuration.
print buildscript.configurations.classpath.each { println it }
print configurations.runtime.each { println it }

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.jdom:jdom2:2.0.5'
  }  
}

dependencies {
  compile 'org.slf4j:slf4j-jdk14:1.7.25'
  compile 'org.slf4j:slf4j-api:1.7.21',
  compile 'org.codehaus.groovy:groovy-all:2.4.7',
  compile 'net.sf.ucanaccess:ucanaccess:+' // newest version
  compile 'javax.servlet:javax.servlet-api:3.1.0'
  compile 'javax:javaee-api:7.0'
  compile 'org.aspectj:aspectjrt:1.8.10'
  compile 'org.glassfish:javax.json:1.0.3' // nie trzeba jersey
  compile 'com.querydsl:querydsl-jpa:4.1.4'
  compile 'com.querydsl:querydsl-apt:4.1.4:jpa' // jpa na ko≈Ñcu powoduje generowanie klas Q...
  compile 'org.mybatis:mybatis-migrations:3.3.1'
  compile 'org.mybatis:mybatis:3.4.5'

  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-core:1.3'
  testCompile 'org.assertj:assertj-core:3.7.0'
    // org.assertj.core.api.Assertions.*; assertThat
  testCompile 'org.mockito:mockito-core:2.8.9'
  testCompile 'org.hibernate:hibernate-validator:5.2.5.Final' // version is different than hibernate core
  testRuntime 'org.hibernate:hibernate-core:5.2.10.Final' //org.hibernate.jpa.HibernatePersistenceProvider
  testRuntime 'org.eclipse.persistence:eclipselink:2.6.0' //org.eclipse.persistence.jpa.PersistenceProvider
  testRuntime 'com.h2database:h2:1.4.195' // org.h2.Driver
  testRuntime 'org.apache.derby:derby:10.13.1.1'
  testCompile 'org.springframework:spring-test:4.3.7.RELEASE'
  testCompile 'org.springframework:spring-context-support:4.3.7.RELEASE'
  testCompile 'org.springframework:spring-webmvc:4.3.7.RELEASE'

  compile 'net.sourceforge.htmlunit:htmlunit:2.26'
  serverDeps 'org.glassfish.jersey.core:jersey-client:2.0.1'
  compile configurations.bootCommon
  
  testCompile files('C:\\IBM\\fe\\java-libs\\junit-4.12.jar')
}
mainClassName = 'groovycrm.EmailParser'

task showMeCache << {
  configurations.compile.each { println it }
}

tasks.withType(Test) {
  outputs.upToDateWhen {false}
  testLogging.showStandardStreams = true
  testLogging.exceptionFormat = 'full'
}
// gradle test -Dtest.single=Class // looks for **/Class*.class
// gradle test --tests *MojTest.nipZData

tasks.withType(JavaCompile) {
  options.encoding = "utf-8"
}

tasks.withType(Javadoc) {
  options.encoding "utf-8"
  options.charSet "utf-8"
  exclude "jpkvat*"
}

void exec(String s) //{{{
{
  def b = new StringBuffer()
  s.execute().waitForProcessOutput(b, b)
  println b.toString()
} //}}}

uruchomienie innego taska, np. exec:
exec {
  commandLine = 'ls'
}

snippets {{{
task findClass << { //{{{
  def needle = ".*SpringBootTest\\..*"
  def found = false
  println "Szukamy $needle"
  configurations.compile.resolvedConfiguration.getFiles({true}).each
  { jar ->
    new java.util.jar.JarFile(jar).entries().collect { it.name }
      .grep { it =~ needle }.each
    { entry ->
      found = true
      println "$jar.path: $entry"
    }
  }
  if (!found)
    println "Nie znaleziono $needle"
} //}}}
}}}

eclipse {{{
apply plugin: 'eclipse'
eclipse.classpath.downloadJavadoc = true
eclipse.classpath.downloadSources = false
tasks.eclipse {
  doLast {
    'D:\\Program_Files\\eSpeak\\command_line\\espeak.exe eclipse'.execute()
  }
}
//gradle cleanEclipse eclipse
}}}

intellij {{{
apply plugin: 'idea'
idea.module.downloadJavadoc = true
//        downloadSources = true
}}}

war {{{
apply plugin: 'war'
task glass (type:Exec, dependsOn: 'war') {
  description = 'deploy at glassfish'
  commandLine = [
     'D:\\lang\\java\\j2ee\\glassfish4\\bin\\asadmin.bat',
    'deploy',
    '--force=true',
    '' + buildDir + '\\libs\\' + rootProject.name + '.war'
  ]
  doLast {
    'D:\\Program_Files\\eSpeak\\command_line\\espeak.exe glass'.execute()
  }
}
}}}

  gradle.buildFinished { buildResult ->
    if (buildResult.getFailure() != null) {
      'D:\\Program_Files\\eSpeak\\command_line\\espeak.exe fadle'.execute()
    }
  }

--offline switch can be forced by configuration file:
  init.gradle in the same directory as gradle.properties (~/.gradle)
  startParameter.offline=true

task run (type:JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = JakasKlasa
  jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7778"
}
