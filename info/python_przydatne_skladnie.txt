import base64
print(base64.standard_b64decode(bytes('bXlzcWw6Ly9qNjQwODlydzpJZGt3cElzY2Z0UldhQG15c3FsLWovajY0MDg5X3BsdWdpbl9jZW50cmFs', 'ascii')));
"{0:.6f}".format(x)

dict literal:
d = { 'one': '1', 'two': '2' }
d = dict(one='1', two='2')

dir(object) - pokazuje info o danym obiekcie
type(object) - pokazuje typ obiektu

PairLR = collections.namedtuple('Pair', 'left right')
@staticmethod
def constructBins(limits: List[float]) -> List[PairLR]:
    for i in range(len(limits) - 1):
        yield PairLR(limits[i], limits[i+1])
        
zip(lst)
zip(*lst)

regex regular expressions: {{{
import re
s = "5C JC)"
print(s)
s2 = re.sub("([A-Z])", "\g<1>!", s)
print(s2)

}}}

random password {{{
import random

random.seed()
nLen = 10

chars = []
for i in range(ord('A'), ord('Z')):
  chars.append(chr(i))
for i in range(ord('a'), ord('z')):
  chars.append(chr(i))
chars.remove('l') # small L is stupid
for i in range(ord('0'), ord('9')):
  chars.append(chr(i))
for ch in "!@#$%^&*()_+-=":
  chars.append(ch)
# for ch in chars:
  # print(ch+' ', end='')
# print()

for i in range(nLen):
  print (chars[random.randint(0, len(chars)-1)], end='')
print()
}}}

@staticmethod
def tee(*args, **kwargs):
    if 'file' in kwargs:
        print(*args, **kwargs)
        del(kwargs['file'])
    print(*args, **kwargs)

exit(1)

import traceback

try:
  print(1/0)
except ZeroDivisionError:
  print("error")
except Exception as e:
  print(e.args)
  traceback.print_exc()
except:
  print("other error")
  
file {{{

# -*- coding: utf-8 -*-

import io
import sys

i = 0
fin = open("test.txt")
fin = io.open("testutf.txt", encoding='utf8')
fout = open("wynik.txt", "w+t")
# fout = io.open("wynik.txt", mode="w+t", encofing='utf8')
sLinia = "start"
while sLinia:
  sLinia = sys.stdin.readline()
  i = i + 1
  print(`i` + ": " + sLinia, end='', file=fout)
  fout.write(u'text w unicode')

import glob
for name in glob.glob('testing*08-05.txt'):
  print name
fout.close()

print name.encode(encoding="utf-8", errors="replace") #ignore

}}}

typing {{{
from typing import Dict, List
d: Dict[str, int] = dict()
}}}

pandas {{{
import pandas as pd
pd.read_csv('file.csv')
print(df.describe().to_string()) # to show all columns, even above 80 chars per line

df = pd.DataFrame(columns = ['col1', 'col2'])
df = df.append(pd.DataFrame(columns = ['col3']))
df = df.drop('col3', axis=1)
df = df.append({'col1': 1, 'col2': 3}, True)
df = df.append(pd.DataFrame([[1, 2]], columns = ['col2', 'col3']))
df = df.append(b, ignore_index=True)
df = df.reset_index()

df = df.assign(confidence = float('nan'))
df.update(df['returnsOpenPrevMktres10'].rename('confidence'))

df.insert(len(df.columns), 'returnsOpenPrevPrevMktres1', float('nan'))

df['time'] = df['time'].apply(pd.to_datetime)
# Apply a function to each row (as a Series):
  df['retBinStr'] = df.apply(lambda r: str(r.retBin), axis=1)
  g['retBinStr'] = g.apply(lambda s: s.name, axis=1)
  
df = df[df.time.map(lambda t: t.date() == datetime.date(2016, 12, 16))]
df['volume2'] = df['volume'] * df['open']

df['bin'] = pd.cut(df['volume2'], 50).apply(lambda bin: bin.left)
g = df[['bin', 'universe']].groupby('bin').mean()
#plt.plot(list(g['universe']))
plt.scatter(list(g.index), list(g['universe']))
plt.hist(list(g.index), bins=50, weights=list(g['universe']), cumulative=True)
}}}

keras {{{
  from tensorflow.python.ops import array_ops, math_ops

  K.set_value(self.kmodel.optimizer.lr, 0.1 * K.get_value(self.kmodel.optimizer.lr))
  se = tf.Session()
  a = tf.constant([1, 2])
  print(se.run(a * a))
  # safe division
  print(se.run(array_ops.where(math_ops.equal(b, 0.0), array_ops.ones_like(a), a / b)))
}}}
