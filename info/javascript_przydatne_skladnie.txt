<h2>Javascript</h2>
<a href="file:///C:/Program_Files/docs/javascript/DOM_level1/level-one-core.html">dom level 1 - core</a><br/>
<a href="file:///C:/Program_Files/docs/javascript/DOM_level1/level-one-html.html">dom level 1 - html</a><br/>
<a href="file:///D:/instal/lang/javascript/ecma_spec_7.html">ecma spec</a><br/>
<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">mozilla XMLHttpRequest</a><br/>
<a href="https://www.w3schools.com/jsref/default.asp">w3schools ref</a><br/>

console.log(typeof o);

var mapObject = { 'aaa': 5, 'bbb': 6 }
for (const key in mapObject) console.log(mapObject[key])

var http = require('http');

document.querySelector('#pdflink').href = 'http://bonsoft.pl';
document.querySelectorAll(".btn").forEach(b => buttons += b.textContent)

  var linkElems = document.querySelectorAll('a');
  for(var i = 0; i < linkElems.length; i++) {
    var linkElem = linkElems[i]

// Utworzenie linka z zawartością poprzez javascript:
// Oryginał: W:\senior\SzyfrujPasek\SzyfrujPasekDll\pasek_szyfrowany_tpl.html
    <p>
      <!-- <a id="pdflink">Pasek PDF</a> -->
      <a id="pdflink">link</a>
    </p>
    <script>

function getAttrAndRemove(elem, attr) {
  var val = elem.getAttribute(attr);
  if (val != null)
    elem.removeAttribute(attr);
  return val;
}

function base64toBlob(base64data, contentType) {
  var str = atob(base64data);
  var buf = new ArrayBuffer(str.length);
  var a = new Uint8Array(buf);
  for(var i = 0; i < str.length; i++) {
    a[i] = str.charCodeAt(i);
  }
  var blob = new Blob([a], {type: contentType});
  return blob;
}

function fixDataLinks()
{
  var linkElems = document.querySelectorAll('a[data]');
  for(var i = 0; i < linkElems.length; i++) {
    var linkElem = linkElems[i]
    var linkDataBase64 = getAttrAndRemove(linkElem, 'data');
    var filename = getAttrAndRemove(linkElem, 'filename');
    var contentType = getAttrAndRemove(linkElem, 'contenttype');
    
    //https://blog.jayway.com/2017/07/13/open-pdf-downloaded-api-javascript/
    var filename = linkElem.getAttribute('filename');
    var forceDownload = ( filename != null );
    if (forceDownload)
      linkElem.download = filename;
    var blob = base64toBlob(linkDataBase64, contentType);
    if (window.navigator && window.navigator.msSaveOrOpenBlob) {
      console.log('fixing links for IE');
      //https://stackoverflow.com/a/24354303/772981
      linkElem.download = filename;
      linkElem.href = '#';
      linkElem.onclick = function(forceDownload, blob, filename) {
        if (forceDownload)
          window.navigator.msSaveOrOpenBlob(blob, filename);
        else
          window.navigator.msSaveOrOpenBlob(blob);
      }.bind(null, forceDownload, blob, filename);
    } else {
      // Firefox, Chrome.
      var objectUrl = window.URL.createObjectURL(blob);
      linkElem.href = objectUrl;
    }
  }
}

ajax {{{
var xhr = new XMLHttpRequest();
var url = "https://developer.mozilla.org/";
xhr.open("GET", url, true);
xhr.onreadystatechange = function () {
  if(xhr.readyState === 4 && xhr.status === 200) {
    console.log(xhr.responseText);
  }
};
xhr.send();
}}}

regex {{{
/\(.*/.exec("sd(f)")[0] - return match for (.*
"input".match(/p(.)/)[1] - return first found group
}}}

simulate onclick: button.dispatchEvent(new Event('click'))

function directTextUnder(elem) {
  var text = ""
  Array.from(elem.childNodes).filter(e => e.nodeType == 3).forEach(e => text += e.nodeValue)
  return text
}

function visitAllLeafs(parent, visitFn) {
  if (!parent.hasChildNodes()) {
    visitFn(parent)
  } else {
    //console.log(parent + "has children: " + parent.hasChildNodes() + ", first: " + parent.firstChild)
    for (var child = parent.firstChild; child; child = child.nextSibling) {
      //console.log("before child is " + nodeDescription(child))
      visitAllLeafs(child, visitFn)
      if (child == null) {
        console.log("strange, child is null")
      }
      //console.log("now child is...")
      //console.log("now child is " + nodeDescription(child))
      //console.log("for loop ends")
    }
  }
}

function nodeDescription(node) {
  var s = ""
  while (node) {
    s += node.nodeName + " "
    node = node.parentElement
  }
  return s
}

function replaceTextWithRed(elem) {
  var span = document.createElement("SPAN")
  span.style.color = 'red'
  span.appendChild(document.createTextNode(elem.textContent))
  elem.parentNode.insertBefore(span, elem)
  elem.parentNode.removeChild(elem)
}

function addTooltip(elem) {
  var toolTip = document.createElement("span")
  toolTip.appendChild(document.createTextNode("tool"))
  toolTip.classList.add("hover")
  
  elem.appendChild(toolTip)
}

function modifyStylesheet() {
    document.styleSheets[0].insertRule('.tooltip { background-color: yellow; }')
}

async function fetchApiAsync(apiName) {
    return new Promise(resolve => {
        fetchApi(apiName, rsp => {
            window.setTimeout(() => resolve(rsp), 3000);
        });
    });
}
await fetchApiAsync('sadfasd');

