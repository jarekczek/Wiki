class Conv
{
  fun getHello(x: Int) = "hello with ${x}"

  fun getHello2(x: Int): String {
    return "hello with ${2*x}"
  }
}

object Main /* singleton class */
{
  fun main(args: Array<String>)
  {
    val conv = Conv()
    println(conv.getHello2(3))
  }
}

fun main(args: Array<String>) {
    // main class is filename + Kt, for example MainKt
    Main.main(args)
}

val f = java.io.File("""c:\temp\1\x.txt""")
f.writeText("hi")
println(f.readText())
val l = listOf(1, 2, 3)
val a = arrayOf("aaa", "b")
// Sort by 2 fields.
val sortedList = list.sortedWith(compareBy({ it.age }, { it.name }))

java -> kotlin {{{
  Object.class -> Object::class albo Object::class.java
  x.getClass() -> x::class
  x instanceof Double -> x is Double
  for(x: lista) -> for(x in lista)
}}}

implement iterator/iterable {{{
class MyIt: Iterable<Int>, Iterator<Int> {
  private var i = 3
  operator override fun iterator() = this
  operator override fun next(): Int = i--
  operator override fun hasNext(): Boolean {
    println("hasNext for $i")
    return i > 0
  }
}
}}}

simplest gradle script {{{
apply plugin: 'kotlin'

buildscript {
  ext.kotlin_version = '1.2.21'
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
}

task run (type:JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'HelloKt'
  jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7778"
}
}}}